<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间特殊作用： 如果使用mapper动态代理方法，这里就需要配置mapper接口地址-->

<mapper namespace="cn.itcast.ssm.dao.mapper.UserMapper">

	<!-- 根据用户id查询一条记录（返回单条记录） -->
	<!-- 
	select标签表示sql查询，内容会封装到Mapped Statement中。
	可以将这个select标签称为一个Statement
	id：Statement的id，用于标识select中定义的 sql，id是在同一个命名空间中不允许重复
	#{}：表示一个占位符，避免sql注入
	parameterType：表示输入参数的类型
	resultType：表示输出 结果集单条记录映射的java对象类型，select查询的字段名和resultType中属性名一致，才能映射成功。
	#{value}：value表示parameter输入参数的变量，如果输入参数是简单类型，使用#{}占位符，变量名可以使用value或其它的名称 
	
	 -->
	<select id="findUserById" parameterType="int" resultType="user" >
		
		SELECT * FROM USER WHERE id = #{id}
	
	</select>
	
	
	<!-- 添加用户
	parameterType：如果parameterType指定 是pojo，在#{}中指定 pojo的属性名获取该pojo的属性值 
	 -->
	<insert id="insertUser" parameterType="cn.itcast.ssm.po.User" >
	
	<!-- 
	keyProperty：将主键设置到pojo中哪个属性中
	order：selectKey中sql执行的时机
	resultType:selectKey中sql执行的结果类型
	LAST_INSERT_ID:是insert后获取自增主键值 
	 -->
	<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
	     select LAST_INSERT_ID()
	</selectKey>
	insert into user(username,birthday,sex,address,detail,score)
	 values(#{username},#{birthday},#{sex},#{address},#{detail},#{score})
	</insert>

	
	<!-- 根据主键用户更新
	更新传入输入参数见容：id和更新的信息
	 -->
	<update id="updateUser" parameterType="cn.itcast.ssm.po.User" >
	   update user set username=#{username},birthday=#{birthday},sex=#{sex}  where id=#{id}
	</update>
	

</mapper>